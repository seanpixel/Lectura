{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trackPromise = exports.promiseCounterUpdateEventId = exports.manuallyResetPromiseCounter = exports.manuallyIncrementPromiseCounter = exports.manuallyDecrementPromiseCounter = exports.getCounter = exports.emitter = void 0;\nvar _tinyEmmiter = require(\"./tinyEmmiter\");\nvar _constants = require(\"./constants\");\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar emitter = new _tinyEmmiter.Emitter();\nexports.emitter = emitter;\nvar promiseCounterUpdateEventId = \"promise-counter-update\";\nexports.promiseCounterUpdateEventId = promiseCounterUpdateEventId;\nvar counter = _defineProperty({}, _constants.defaultArea, 0);\nvar getCounter = function getCounter(area) {\n  return counter[area];\n};\nexports.getCounter = getCounter;\nvar trackPromise = function trackPromise(promise, area) {\n  area = area || _constants.defaultArea;\n  incrementPromiseCounter(area);\n  var onResolveHandler = function onResolveHandler() {\n    return decrementPromiseCounter(area);\n  };\n  promise.then(onResolveHandler, onResolveHandler);\n  return promise;\n};\nexports.trackPromise = trackPromise;\nvar incrementPromiseCounter = function incrementPromiseCounter(area) {\n  incrementCounter(area);\n  var promiseInProgress = anyPromiseInProgress(area);\n  emitter.emit(promiseCounterUpdateEventId, promiseInProgress, area);\n};\nvar incrementCounter = function incrementCounter(area) {\n  if (Boolean(counter[area])) {\n    counter[area]++;\n  } else {\n    counter[area] = 1;\n  }\n};\nvar anyPromiseInProgress = function anyPromiseInProgress(area) {\n  return counter[area] > 0;\n};\nvar decrementPromiseCounter = function decrementPromiseCounter(area) {\n  counter[area] > 0 && decrementCounter(area);\n  var promiseInProgress = anyPromiseInProgress(area);\n  emitter.emit(promiseCounterUpdateEventId, promiseInProgress, area);\n};\nvar decrementCounter = function decrementCounter(area) {\n  counter[area]--;\n};\nvar manuallyResetPromiseCounter = function manuallyResetPromiseCounter(area) {\n  area = area || _constants.defaultArea;\n  counter[area] = 0;\n  emitter.emit(promiseCounterUpdateEventId, false, area);\n};\nexports.manuallyResetPromiseCounter = manuallyResetPromiseCounter;\nvar manuallyDecrementPromiseCounter = function manuallyDecrementPromiseCounter(area) {\n  area = area || _constants.defaultArea;\n  decrementPromiseCounter(area);\n};\nexports.manuallyDecrementPromiseCounter = manuallyDecrementPromiseCounter;\nvar manuallyIncrementPromiseCounter = function manuallyIncrementPromiseCounter(area) {\n  area = area || _constants.defaultArea;\n  incrementPromiseCounter(area);\n};\n// TODO: Enhancement we could catch here errors and throw an Event in case there's an HTTP Error\n// then the consumer of this event can be listening and decide what to to in case of error\nexports.manuallyIncrementPromiseCounter = manuallyIncrementPromiseCounter;","map":null,"metadata":{},"sourceType":"script"}