{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.usePromiseTracker = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _trackPromise = require(\"./trackPromise\");\nvar _setupConfig = require(\"./setupConfig\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nvar usePromiseTracker = function usePromiseTracker() {\n  var outerConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _setupConfig.defaultConfig;\n  var isMounted = _react[\"default\"].useRef(false);\n  _react[\"default\"].useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      return isMounted.current = false;\n    };\n  }, []);\n\n  // Included in state, it will be evaluated just the first time,\n  // TODO: discuss if this is a good approach\n  // We need to apply defensive programming, ensure area and delay default to secure data\n  // cover cases like not all params informed, set secure defaults\n  var _React$useState = _react[\"default\"].useState((0, _setupConfig.setupConfig)(outerConfig)),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    config = _React$useState2[0];\n\n  // Edge case, when we start the application if we are loading just onComponentDidMount\n  // data, event emitter could have already emitted the event but subscription is not yet\n  // setup\n  _react[\"default\"].useEffect(function () {\n    if (isMounted.current && config && config.area && (0, _trackPromise.getCounter)(config.area) > 0) {\n      setInternalPromiseInProgress(true);\n      setPromiseInProgress(true);\n    }\n  }, [config]);\n\n  // Internal will hold the current value\n  var _React$useState3 = _react[\"default\"].useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    internalPromiseInProgress = _React$useState4[0],\n    setInternalPromiseInProgress = _React$useState4[1];\n  // Promise in progress is 'public', it can be affected by the _delay_ parameter\n  // it may not show the current state\n  var _React$useState5 = _react[\"default\"].useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    promiseInProgress = _React$useState6[0],\n    setPromiseInProgress = _React$useState6[1];\n\n  // We need to hold a ref to latestInternal, to check the real value on\n  // callbacks (if not we would get always the same value)\n  // more info: https://overreacted.io/a-complete-guide-to-useeffect/\n  var latestInternalPromiseInProgress = _react[\"default\"].useRef(internalPromiseInProgress);\n  var notifyPromiseInProgress = function notifyPromiseInProgress() {\n    !config || !config.delay || config.delay === 0 ? setPromiseInProgress(true) : setTimeout(function () {\n      // Check here ref to internalPromiseInProgress\n      if (isMounted.current && latestInternalPromiseInProgress.current) {\n        setPromiseInProgress(true);\n      }\n    }, config.delay);\n  };\n  var updatePromiseTrackerStatus = function updatePromiseTrackerStatus(anyPromiseInProgress, areaAffected) {\n    if (isMounted.current && config.area === areaAffected) {\n      setInternalPromiseInProgress(anyPromiseInProgress);\n      // Update the ref object as well, we will check it when we need to\n      // cover the _delay_ case (setTimeout)\n      latestInternalPromiseInProgress.current = anyPromiseInProgress;\n      if (!anyPromiseInProgress) {\n        setPromiseInProgress(false);\n      } else {\n        notifyPromiseInProgress();\n      }\n    }\n  };\n  _react[\"default\"].useEffect(function () {\n    latestInternalPromiseInProgress.current = internalPromiseInProgress;\n    _trackPromise.emitter.on(_trackPromise.promiseCounterUpdateEventId, updatePromiseTrackerStatus);\n    return function () {\n      return _trackPromise.emitter.off(_trackPromise.promiseCounterUpdateEventId, updatePromiseTrackerStatus);\n    };\n  }, []);\n  return {\n    promiseInProgress: promiseInProgress\n  };\n};\nexports.usePromiseTracker = usePromiseTracker;","map":null,"metadata":{},"sourceType":"script"}